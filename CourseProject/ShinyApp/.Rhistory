h<-hist(age, breaks=20, density=10, col="lightgray",yaxt="n",ann=FALSE)
title(xlab = "Age")
xfit<-seq(min(age),max(age),length=40)
yfit<-dnorm(xfit,mean=mean(age),sd=sd(age))
yfit <- yfit*diff(h$mids[1:2])*length(age)
lines(xfit, yfit, col="black", lwd=3)
abline(v=mean(age),col="green",lwd=2)
##Target Group GENDER
gender<-c(female=50,male=50)
barplot(gender, col=c("pink","cyan"),legend = rownames(gender),yaxt="n")
text(0.7,30,"50%",cex=1.5,col="red")
text(1.9,30,"50%",cex=1.5,col="blue")
slices <- c(50,50)
lbls <- c("Female","Male")
pie(slices, labels = lbls,col=rainbow(length(lbls)))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training<-segmentationOriginal[which(segmentationOriginal$Case=="Train"),]
testing<-segmentationOriginal[which(segmentationOriginal$Case=="Test"),]
set.seed(125)
modFit<-train(Class~.,method="rpart",data=training)
print(modFit$finalModel)
predict(modFit,newdata=testing)
segmentationOriginal[which(segmentationOriginal$TotalIntenCh2==23000),]
library(rattle)
fancyRpartPlot(modFit$finalModel)
(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
modFit<-train(Area~.,method=rpart,data=olive)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
modFit<-train(Area~.,method=rpart,data=olive)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
library(caret)
modFit<-train(Area~.,method="rpart",data=olive)
print(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
predict(modFit,newdata)
str(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,
library(ElemStatLearn)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(SAheart)
str(SAheart)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,model="glm",family="binomial",data=trainSA)
prediction<-predict(modFit,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,predict(modFit,trainSA))
missClass(testSA,predict(modFit,testSA))
prediction<-predict(modFit,testSA)
prediction
((prediction > 0.5)*1) != values
((prediction > 0.5)*1) != testSA
sum(((prediction > 0.5)*1) != testSA)
length(testSA)
missClass(trainSA$sbp,predict(modFit,trainSA))
sum(((prediction > 0.5)*1) != testSA$sbp)
length(testSA)
prediction<-predict(modFit,testSA)
prediction
missClass(testSA$sbp,predict(modFit,testSA))
((prediction > 0.5)*1) != testSA$sbp
((prediction > 0.5)*1) != testSA
prediction<-predict(modFit,newdata=testSA)
prediction
missClass(testSA$sbp,prediction)
prediction>0.5
(prediction>0.5)*1
testSA$sbp
testSA$chd
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,prediction)
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,model="glm",family="binomial",data=trainSA)
prediction<-predict(modFit,newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,model="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
?SAheart
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
vowel.test$y<-factor()
vowel.test$y<-factor(NULL)
vowel.test$y<-factor()
vowel.test$y<-factor(NA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y<-factor(NA)
vowel.train$y<-factor(NA)
set.seed(33833)
rf_mod <- train(y ~., data=vowel.train, method="rf")
names(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y<-factor(vowel.test$y)
vowel.train$y<-factor(vowel.train$y)
set.seed(33833)
rf_mod <- train(y ~., data=vowel.train, method="rf")
varImp(rf_mod)
load("C:/Users/Aimilia/Desktop/DataScience/predmachlearn-033/Course Project/afterrf.RData")
modelFit
modelFit.rf.some<-modelFit
modelFit.rf.some
modelFit.rf.all<-train(classe~.,method="rf",prox=TRUE,data=training)
library(caret)
library(kernlab)
modelFit.rf.all<-train(classe~.,method="rf",prox=TRUE,data=training)
modelFit.rf.all
modelFit.rf.all$finalModel
myresults<-predict(modelFit.rf.all,testing)
dim(mmyresults)
dim(myresults)
length(myresults)
summary(myresults)
testing<-total_training[-intrain,]
myresults<-predict(modelFit.rf.all,total_training[-intrain,])
summary(myresults)
dim(testing)
myresults<-predict(modelFit.rf.all,newdata=na.omit(testing)
)
summary(myresults)
validation_data
save.image("C:/Users/Aimilia/Desktop/DataScience/predmachlearn-033/Course Project/after2nrf.RData")
total_training<- read.csv(file="pml-training.csv", header=TRUE, sep=",",na.strings = c("NA",""))
validation_data<- read.csv(file="pml-testing.csv",header=TRUE,sep=",",na.strings = c("NA",""))
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
total_training[,8:159] <- factorsNumeric(total_training[,8:159])
validation_data[,8:159] <- factorsNumeric(validation_data[,8:159])
summary(total_training)
excludedcolumn<-c(1,3:7)
excludedcolumn<-c(excludedcolumn, grep("kurtosis_yaw_belt", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("skewness_yaw_belt", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("amplitude_yaw_belt", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("kurtosis_yaw_dumbbell", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("skewness_yaw_dumbbell", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("amplitude_yaw_dumbbell", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("kurtosis_yaw_forearm", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("skewness_yaw_forearm", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("amplitude_yaw_forearm", colnames(total_training)))
##exclude columns with calculations
excludedcolumn<-c(excludedcolumn, grep("max_", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("min_", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("var_", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("avg_", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("stddev_", colnames(total_training)))
excludedcolumn<-c(excludedcolumn, grep("total_", colnames(total_training)))
##Sub split training data to test and train data
set.seed(333)
intrain <-createDataPartition(y=total_training$classe,p=0.7,list=FALSE)
training<-total_training[intrain,-excludedcolumn]
testing<-total_training[-intrain,-excludedcolumn]
modelFit<-train(classe~.,method="rpart",preProcess=c("pca","knnImpute"),data=training)
modelFit<-train(classe~.,method="rpart",na.action = na.pass ,data=training)
modelFit
modelFit<-train(classe~.,method="ada",na.action = na.pass ,data=training)
set.seed(333)
intrain <-createDataPartition(y=total_training$classe,p=0.7,list=FALSE)
training<-total_training[intrain,]
testing<-total_training[-intrain,]
modelFit<-train(classe~.,method="rf",prox=TRUE,na.action=na.roughfix, data=training)
set.seed(333)
intrain <-createDataPartition(y=total_training$classe,p=0.7,list=FALSE)
training<-total_training[intrain,-excludedcolumn]
testing<-total_training[-intrain,-excludedcolumn]
modelFit<-train(classe~.,method="rpart",na.action = na.pass ,data=training)
modelFit
modelFit2<-train(classe~.,method="ada",na.action = na.pass ,data=training)
modelFit2<-train(classe~.,method="lda",na.action = na.pass ,data=training)
modelFit2<-train(classe~.,method="lda",na.action = na.roughfix ,data=training)
modelFit2
modelFit1<-train(classe~.,method="rpart",na.action = na.roughfix ,data=training)
modelFit1
modelFit3<-train(classe~.,method="ada",na.action = na.roughfix ,data=training)
modelFit2
predictions<-predict(modelFit2,testing)
length(predictions)
modelFit2<-train(classe~.,method="lda",preProcess="knnImpute" na.action = na.roughfix ,data=training)
modelFit2<-train(classe~.,method="lda",preProcess="knnImpute", na.action = na.roughfix ,data=training)
modelFit2
modelFit2<-train(classe~.,method="lda",preProcess=c("pca","knnImpute") ,data=training)
modelFit2<-train(classe~.,method="lda",preProcess=c("knnImpute") ,data=training)
varImp(modelFit.rf.some,scale=FALSE)
varImp(modelFit2,scale=FALSE)
varImp(modelFit,scale=FALSE)
varImp(modelFit1,scale=FALSE)
na_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(x, function(y) sum(length(which(is.na(y)))))
na_count <-sapply(total_training, function(y) sum(length(which(is.na(y)))))
na_count>0.8*dim(total_training[1])
na_count<0.8*dim(total_training[1])
na_count>0.7*dim(total_training[1])
emy<-na_count>0.7*dim(total_training[1])
length(emy)
emy==TRUE
total_training[,emy]
str(total_training[,-emy])
total_training[, colSums(is.na(total_training)) <0.7* nrow(total_training)]
emy<-total_training[, colSums(is.na(total_training)) <0.7* nrow(total_training)]
str(emy)
emy<-total_training[, colSums(is.na(total_training)) <0.8* nrow(total_training)]
str(emy)
emy<-total_training[, colSums(is.na(total_training)) <0.9* nrow(total_training)]
emy<-total_training[, colSums(is.na(total_training)) <0.5* nrow(total_training)]
emy<-total_training[, colSums(is.na(total_training)) <0.3* nrow(total_training)]
emy<-total_training[, colSums(is.na(total_training)) <0.95* nrow(total_training)]
emy<-total_training[, colSums(is.na(total_training)) == nrow(total_training)]
emy<-total_training[, colSums(is.na(total_training)) != nrow(total_training)]
columns_to_keep<-total_training[, colSums(is.na(total_training)) <0.95* nrow(total_training)]
colSums(is.na(total_training)) <0.95* nrow(total_training)
grep(names(columns_to_keep), colnames(total_training))
columns_to_keep<-names(total_training[, colSums(is.na(total_training)) <0.95* nrow(total_training)])
columns_to_keep
which(names(total_training)%in%columns_to_keep)
columns_to_keep_index<-which(names(total_training)%in%columns_to_keep)
propercolumns<-c(columns_to_keep,-c(1,3:7)
)
propercolumns
propercolumns<-c(columns_to_keep_index,-c(1,3:7))
propercolumns
propercolumns<-columns_to_keep_index[-c(1,3:7)]
propercolumns
names(total_training[,propercolumns])
thetrainingdataset<-total_training[,propercolumns]
thetrainingdata<-total_training[,propercolumns]
grep("total_", colnames(thetrainingdata))
set.seed(7777)
set.seed(7777)
intrain <-createDataPartition(y=thetrainingdata$classe,p=0.7,list=FALSE)
training<-thetrainingdata[intrain,]
testing<-thetrainingdata[-intrain,]
modelFit2<-train(classe~.,method="lda",preProcess=c("pca") ,data=training)
modelFit2
modelFit2<-train(classe~.,method="lda",preProcess=c("pca","knnImpute") ,data=training)
modelFit2
modelFit3<-train(classe~.,method="ada",preProcess="pca",data=training)
modelFit1<-train(classe~.,method="lda",preProcess=c("pca") ,data=training)
modelFit1
modelFit2<-train(classe~.,method="rf",prox=TRUE,preProcess="pca", data=training)
modelFit2
library(rga)
library(devtools)
library(ggplot2)
library(GGally)
library(forecast)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
##rga.open(instance="ga")
rga.open(instance="ga", where="~/ga.rga")
id<-"64707273"
startdate<-as.Date("2013-01-01")
enddate <-Sys.Date()
##Visitorship statistics of each day
dailyvisitorshipstats<-ga$getData(id,start.date = startdate,end.date=enddate,
metrics="ga:sessions,ga:bouncerate,ga:avgSessionDuration",
dimensions = "ga:date")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='tsakem', token='BE7685733047B09C272882CD4CA94A3D', secret='f0hmZKIbwL8jMhpTJCDrYNh6UpKXTHyvWmc/v47D')
install.packages("shiny")
install_github('slidify','ramnathv')
install.packages('devtools')
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install.packages("stringi")
install.packages("stringi")
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
library(rga)
library(devtools)
library(ggplot2)
library(GGally)
library(forecast)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
##rga.open(instance="ga")
rga.open(instance="ga", where="~/ga.rga")
##ga$getProfiles()
id<-"64707273"
realtimenow<-ga$get_realtime(id,metrics="rt:activeUsers",
dimensions = NULL)
realtimenow<-get_realtime(id,metrics="rt:activeUsers",
dimensions = NULL)
library(rga)
realtimenow<-get_realtime(id,metrics="rt:activeUsers",
dimensions = NULL)
startdate<-as.Date("2014-11-13")
enddate <-Sys.Date()
monthvisitorshipstats<-ga$getData(id,start.date = startdate,end.date=enddate,
metrics="ga:sessions,ga:bouncerate,ga:avgSessionDuration",
dimensions = "ga:yearMonth")
monthvisitorshipstats<-getData(id,start.date = startdate,end.date=enddate,
metrics="ga:sessions,ga:bouncerate,ga:avgSessionDuration",
dimensions = "ga:yearMonth")
monthvisitorshipstats<-ga$getData(id,start.date = startdate,end.date=enddate,
metrics="ga:sessions,ga:bouncerate,ga:avgSessionDuration",
dimensions = "ga:yearMonth")
realtimenow<-ga$getrealtime(id,metrics="rt:activeUsers",
dimensions = NULL)
ga
summary(ga)
str(ga)
authorise()
authorize()
## Not run:
# load package
library(RGA)
library(rga)
# get access token
authorize()
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
##rga.open(instance="ga")
rga.open(instance="ga", where="~/ga.rga")
authorize()
ga_data <- get_ga(id, start.date = first.date, end.date = "today",
metrics = "ga:users,ga:sessions",
dimensions = "ga:userGender,ga:userAgeBracket")
install.packages("RGA")
ga_data <- get_ga(id, start.date = first.date, end.date = "today",
metrics = "ga:users,ga:sessions",
dimensions = "ga:userGender,ga:userAgeBracket")
firstdate(ga)
?remove.packages
remove.packages("rga")
install.packages("rga")
install.packages("rga")
library(shiny)
runExample("01_hello")
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
library(RCurl)
theURL <- getURL("http://www.football-data.co.uk/mmz4281/1516/SP1.csv")
thedata <- read.csv(text = theURL)
theplace=="home"
if (theplace=="home") {
thedataset<- thedata[which("HomeTeam"=="Barcelona"),1:10]
plot(thedataset$AwayTeam,thedataset$FTHG)
}else{
thedataset<- thedata[which("AwayTeam"=="Barcelona"),1:10]
plot(thedataset$HomeTeam,thedataset$FTAG)
}
theplace=="home"
theplace<-"home"
if (theplace=="home") {
thedataset<- thedata[which("HomeTeam"=="Barcelona"),1:10]
plot(thedataset$AwayTeam,thedataset$FTHG)
}else{
thedataset<- thedata[which("AwayTeam"=="Barcelona"),1:10]
plot(thedataset$HomeTeam,thedataset$FTAG)
}
thedataset
theplace<-"home"
if (theplace=="home") {
thedataset<- thedata[which(thedata$HomeTeam=="Barcelona"),1:10]
plot(thedataset$AwayTeam,thedataset$FTHG)
}else{
thedataset<- thedata[which(thedata$AwayTeam=="Barcelona"),1:10]
plot(thedataset$HomeTeam,thedataset$FTAG)
}
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
thedataset
plot(thedataset$AwayTeam,thedataset$FTHG)
plot(thedataset$AwayTeam,thedataset$FTHG)
thedataset$AwayTeam
?ssubset
?subset
thedataset2<-subset(thedata, HomeTeam == "Barcelona", select = 1:10)
thedataset2$AwayTeam
thedataset$AwayTeam<-factor(thedataset$AwayTeam)
thedataset2$AwayTeam
thedataset$AwayTeam
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
tN <- table(Ni <- stats::rpois(100, lambda = 5))
tN
r <- barplot(tN, col = rainbow(20))
str(tN)
goalcount <- table(thedataset$FTHG, thedataset$AwayTeam)
goalcount
barplot(goalcount)
library(ggplot2)
qplot(thedataset$FTHG,thedataset$AwayTeam)
qplot(thedataset$AwayTeam,thedataset$FTHG)
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="boxplot")
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="bar")
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="bar",sta="bin")
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="bar",sta="identity")
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="bar",stat="identity")
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="bar",stat="identity",color=thedataset$FTR)
qplot(thedataset$AwayTeam,thedataset$FTHG,geom="bar",stat="identity",fill=thedataset$FTR)
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
thedataset
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
thedataset$FTR[thedataset$FTR=="H"]<-"Barca Won"
thedataset$FTR[thedataset$FTR=="D"]<-"Draw"
thedataset$FTR[thedataset$FTR=="A"]<-"Barca Loost"
thedataset$FTR[thedataset$FTR=="H",]<-"Barca Won"
thedataset$FTR[thedataset$FTR=="D",]<-"Draw"
thedataset$FTR[thedataset$FTR=="A",]<-"Barca Loost"
thedataset[which(thedataset$FTR=="H"),thedataset$FTR]<-"Barca Won"
thedataset[which(thedataset$FTR=="H"),thedataset$FTR]<-"Barca Won"
thedataset[which(thedataset$FTR=="H"),thedataset$FTR]
thedataset
thedataset<- thedata[which(thedata$HomeTeam=="Barcelona"),1:10]
thedataset
thedataset[which(thedataset$FTR=="H"),thedataset$FTR]
thedataset[which(thedataset$FTR=="H"),]
thedataset[which(thedataset$FTR=="H"),"FTR"]
thedataset[which(thedataset$FTR=="H"),"FTR"]<-"Barca Won"
thedataset$theresult<-"Draw"
thedataset$theresult[thedataset$FTR=="A",]<-"Barca Loost"
thedataset
thedataset<- thedata[which(thedata$HomeTeam=="Barcelona"),1:10]
thedataset$theresult[thedataset$FTR=="A",]<-"Barca Loost"
thedataset
thedataset$theresult<-"Draw"
thedataset
thedataset$theresult[thedataset$FTR=="A",]<-"Barca Loost"
thedataset$theresult[thedataset$FTR=="A"]<-"Barca Loost"
thedataset
thedataset$theresult[thedataset$FTR=="H"]<-"Barca Won"
thedataset
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
shiny::runApp('C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test')
setwd("C:/Users/Aimilia/Desktop/DataScience/devdataprod-034/shiny/test")
